{"name":"Colourjump","tagline":"A* Search Solver of the Colour Jump game","body":"# colourjump\r\nA* Search Solver of the Popular Colour Jump game\r\n\r\n###Input\r\n```\r\nSize of Board (N)\r\nNumber of Colours (C)\r\n<Row1>\r\n<Row2>\r\n..\r\n..\r\n<RowN>\r\n```\r\nExample Input \r\n\r\n```\r\n4\r\n3\r\n1 2 2 1\r\n2 1 3 2\r\n3 1 3 2\r\n0 2 3 0\r\n```\r\n###Output\r\n![](https://github.com/mronian/colourjump/blob/master/Screenshots/Output.png)\r\n###State\r\n\r\n1 1 2 2\r\n\r\n2 1 3 2\r\n\r\n3 1 3 2\r\n\r\n0 2 3 0\r\n\r\n###Goal\r\n\r\nThe final goal state consists of all states having just one ball of one colour. \r\n\r\n###Heuristic\r\n\r\nNumber of colours left on the board -1\r\n\r\n###Gameplay\r\n\r\n1. Take board start state from input file.\r\n\r\n2. Initialise Priority Queue with this state\r\n\r\n3. Proceed to A* Search\r\n\r\n4. For each state taken from priority queue, check if goal state is reached :\r\n\r\n- If YES, proceed to print the path from start->goal state.\r\n  \r\n- If NO, continue with A* search.\r\n  \r\n5. Neighbours of a state are found by:\r\n\r\n- Finding locations of all zeros\r\n  \r\n- For each zero, find the possible moves to fill it in the up, down, left and right directions\r\n  .\r\n-  For each such move, get the configuration of the next board state.\r\n  \r\n-  All the above states will be neighbours of the current state.\r\n  \r\n6. The Program also stores moves between 2 configurations of the board for printing the moves at the end.\r\n\r\n7. Proceed with A* Search by finding f-values of all the board states and adding to priority queue.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}